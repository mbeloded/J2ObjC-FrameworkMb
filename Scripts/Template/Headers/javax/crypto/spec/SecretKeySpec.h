//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/crypto/spec/SecretKeySpec.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("JavaxCryptoSpecSecretKeySpec_INCLUDE_ALL")
#ifdef JavaxCryptoSpecSecretKeySpec_RESTRICT
#define JavaxCryptoSpecSecretKeySpec_INCLUDE_ALL 0
#else
#define JavaxCryptoSpecSecretKeySpec_INCLUDE_ALL 1
#endif
#undef JavaxCryptoSpecSecretKeySpec_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

/*!
 @author Alexander Y. Kleymenov
 @version $Revision$
 */

#if !defined (JavaxCryptoSpecSecretKeySpec_) && (JavaxCryptoSpecSecretKeySpec_INCLUDE_ALL || defined(JavaxCryptoSpecSecretKeySpec_INCLUDE))
#define JavaxCryptoSpecSecretKeySpec_

#define JavaxCryptoSecretKey_RESTRICT 1
#define JavaxCryptoSecretKey_INCLUDE 1
#include "../../../javax/crypto/SecretKey.h"

#define JavaSecuritySpecKeySpec_RESTRICT 1
#define JavaSecuritySpecKeySpec_INCLUDE 1
#include "../../../java/security/spec/KeySpec.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "../../../java/io/Serializable.h"

@class IOSByteArray;

/*!
 @brief A key specification for a <code>SecretKey</code> and also a secret key
 implementation that is provider-independent.
 It can be used for raw secret
 keys that can be specified as <code>byte[]</code>.
 */
@interface JavaxCryptoSpecSecretKeySpec : NSObject < JavaxCryptoSecretKey, JavaSecuritySpecKeySpec, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Creates a new <code>SecretKeySpec</code> for the key data from the
 specified buffer <code>key</code> starting at <code>offset</code> with
 length <code>len</code> and the specified <code>algorithm</code> name.
 @param key
 the key data.
 @param offset
 the offset.
 @param len
 the size of the key data.
 @param algorithm
 the algorithm name.
 @throws IllegalArgumentException
 if the key data or the algorithm name is null, the key data
 is empty or <code>offset</code> and <code>len</code> do not
 specify a valid chunk in the buffer <code>key</code>.
 @throws ArrayIndexOutOfBoundsException
 if <code>offset</code> or <code>len</code> is negative.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)key
                          withInt:(jint)offset
                          withInt:(jint)len
                     withNSString:(NSString *)algorithm;

/*!
 @brief Creates a new <code>SecretKeySpec</code> for the specified key data and
 algorithm name.
 @param key
 the key data.
 @param algorithm
 the algorithm name.
 @throws IllegalArgumentException
 if the key data or the algorithm name is null or if the key
 data is empty.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)key
                     withNSString:(NSString *)algorithm;

/*!
 @brief Compares the specified object with this <code>SecretKeySpec</code>
 instance.
 @param obj
 the object to compare.
 @return true if the algorithm name and key of both object are equal,
 otherwise false.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the algorithm name.
 @return the algorithm name.
 */
- (NSString *)getAlgorithm;

/*!
 @brief Returns the encoded form of this secret key.
 @return the encoded form of this secret key.
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Returns the name of the format used to encode the key.
 @return the format name "RAW".
 */
- (NSString *)getFormat;

/*!
 @brief Returns the hash code of this <code>SecretKeySpec</code> object.
 @return the hash code.
 */
- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxCryptoSpecSecretKeySpec)

FOUNDATION_EXPORT void JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(JavaxCryptoSpecSecretKeySpec *self, IOSByteArray *key, NSString *algorithm);

FOUNDATION_EXPORT JavaxCryptoSpecSecretKeySpec *new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(IOSByteArray *key, NSString *algorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaxCryptoSpecSecretKeySpec_initWithByteArray_withInt_withInt_withNSString_(JavaxCryptoSpecSecretKeySpec *self, IOSByteArray *key, jint offset, jint len, NSString *algorithm);

FOUNDATION_EXPORT JavaxCryptoSpecSecretKeySpec *new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withInt_withInt_withNSString_(IOSByteArray *key, jint offset, jint len, NSString *algorithm) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoSpecSecretKeySpec)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaxCryptoSpecSecretKeySpec_INCLUDE_ALL")
