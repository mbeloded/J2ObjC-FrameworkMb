//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/EmptyStackException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("JavaUtilEmptyStackException_INCLUDE_ALL")
#ifdef JavaUtilEmptyStackException_RESTRICT
#define JavaUtilEmptyStackException_INCLUDE_ALL 0
#else
#define JavaUtilEmptyStackException_INCLUDE_ALL 1
#endif
#undef JavaUtilEmptyStackException_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilEmptyStackException_) && (JavaUtilEmptyStackException_INCLUDE_ALL || defined(JavaUtilEmptyStackException_INCLUDE))
#define JavaUtilEmptyStackException_

#define JavaLangRuntimeException_RESTRICT 1
#define JavaLangRuntimeException_INCLUDE 1
#include "../../java/lang/RuntimeException.h"

/*!
 @brief An <code>EmptyStackException</code> is thrown if the pop/peek method of a stack is
 executed on an empty stack.
 - seealso: java.lang.RuntimeException
 */
@interface JavaUtilEmptyStackException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs a new <code>EmptyStackException</code> with the stack trace filled
 in.
 */
- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilEmptyStackException)

FOUNDATION_EXPORT void JavaUtilEmptyStackException_init(JavaUtilEmptyStackException *self);

FOUNDATION_EXPORT JavaUtilEmptyStackException *new_JavaUtilEmptyStackException_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilEmptyStackException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaUtilEmptyStackException_INCLUDE_ALL")
