//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/TimerTask.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("JavaUtilTimerTask_INCLUDE_ALL")
#ifdef JavaUtilTimerTask_RESTRICT
#define JavaUtilTimerTask_INCLUDE_ALL 0
#else
#define JavaUtilTimerTask_INCLUDE_ALL 1
#endif
#undef JavaUtilTimerTask_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilTimerTask_) && (JavaUtilTimerTask_INCLUDE_ALL || defined(JavaUtilTimerTask_INCLUDE))
#define JavaUtilTimerTask_

#define JavaLangRunnable_RESTRICT 1
#define JavaLangRunnable_INCLUDE 1
#include "../../java/lang/Runnable.h"

/*!
 @brief The <code>TimerTask</code> class represents a task to run at a specified time.
 The task
 may be run once or repeatedly.
 - seealso: Timer
 - seealso: java.lang.Object#wait(long)
 */
@interface JavaUtilTimerTask : NSObject < JavaLangRunnable > {
 @public
  id lock_;
  jboolean cancelled_;
  jlong when_;
  jlong period_;
  jboolean fixedRate_;
}

#pragma mark Public

/*!
 @brief Cancels the <code>TimerTask</code> and removes it from the <code>Timer</code>'s queue.
 Generally, it
 returns <code>false</code> if the call did not prevent a <code>TimerTask</code> from running at
 least once. Subsequent calls have no effect.
 @return <code>true</code> if the call prevented a scheduled execution
 from taking place, <code>false</code> otherwise.
 */
- (jboolean)cancel;

/*!
 @brief The task to run should be specified in the implementation of the <code>run()</code>
 method.
 */
- (void)run;

/*!
 @brief Returns the scheduled execution time.
 If the task execution is in
 progress it returns the execution time of the ongoing task. Tasks which
 have not yet run return an undefined value.
 @return the most recent execution time.
 */
- (jlong)scheduledExecutionTime;

#pragma mark Protected

/*!
 @brief Creates a new <code>TimerTask</code>.
 */
- (instancetype)init;

#pragma mark Package-Private

- (jlong)getWhen;

- (jboolean)isScheduled;

- (void)setScheduledTimeWithLong:(jlong)time;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTimerTask)

J2OBJC_FIELD_SETTER(JavaUtilTimerTask, lock_, id)

FOUNDATION_EXPORT void JavaUtilTimerTask_init(JavaUtilTimerTask *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTimerTask)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaUtilTimerTask_INCLUDE_ALL")
