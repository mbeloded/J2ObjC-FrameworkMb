//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/IllegalFormatWidthException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("JavaUtilIllegalFormatWidthException_INCLUDE_ALL")
#ifdef JavaUtilIllegalFormatWidthException_RESTRICT
#define JavaUtilIllegalFormatWidthException_INCLUDE_ALL 0
#else
#define JavaUtilIllegalFormatWidthException_INCLUDE_ALL 1
#endif
#undef JavaUtilIllegalFormatWidthException_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilIllegalFormatWidthException_) && (JavaUtilIllegalFormatWidthException_INCLUDE_ALL || defined(JavaUtilIllegalFormatWidthException_INCLUDE))
#define JavaUtilIllegalFormatWidthException_

#define JavaUtilIllegalFormatException_RESTRICT 1
#define JavaUtilIllegalFormatException_INCLUDE 1
#include "../../java/util/IllegalFormatException.h"

/*!
 @brief An <code>IllegalFormatWidthException</code> will be thrown if the width is a
 negative value other than -1 or in other cases where a width is not
 supported.
 - seealso: java.lang.RuntimeException
 */
@interface JavaUtilIllegalFormatWidthException : JavaUtilIllegalFormatException

#pragma mark Public

/*!
 @brief Constructs a new <code>IllegalFormatWidthException</code> with specified
 width.
 @param w
 the width.
 */
- (instancetype)initWithInt:(jint)w;

- (NSString *)getMessage;

/*!
 @brief Returns the width associated with the exception.
 @return the width.
 */
- (jint)getWidth;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilIllegalFormatWidthException)

FOUNDATION_EXPORT void JavaUtilIllegalFormatWidthException_initWithInt_(JavaUtilIllegalFormatWidthException *self, jint w);

FOUNDATION_EXPORT JavaUtilIllegalFormatWidthException *new_JavaUtilIllegalFormatWidthException_initWithInt_(jint w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIllegalFormatWidthException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaUtilIllegalFormatWidthException_INCLUDE_ALL")
