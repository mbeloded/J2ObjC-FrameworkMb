//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/TypeNotPresentException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("JavaLangTypeNotPresentException_INCLUDE_ALL")
#ifdef JavaLangTypeNotPresentException_RESTRICT
#define JavaLangTypeNotPresentException_INCLUDE_ALL 0
#else
#define JavaLangTypeNotPresentException_INCLUDE_ALL 1
#endif
#undef JavaLangTypeNotPresentException_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangTypeNotPresentException_) && (JavaLangTypeNotPresentException_INCLUDE_ALL || defined(JavaLangTypeNotPresentException_INCLUDE))
#define JavaLangTypeNotPresentException_

#define JavaLangRuntimeException_RESTRICT 1
#define JavaLangRuntimeException_INCLUDE 1
#include "../../java/lang/RuntimeException.h"

@class JavaLangThrowable;

/*!
 @brief Thrown when a program tries to access a class, interface, enum or annotation
 type through a string that contains the type's name and the type cannot be
 found.
 This exception is an unchecked alternative to
 <code>java.lang.ClassNotFoundException</code>.
 @since 1.5
 */
@interface JavaLangTypeNotPresentException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs a new <code>TypeNotPresentException</code> with the current stack
 trace, a detail message that includes the name of the type that could not
 be found and the <code>Throwable</code> that caused this exception.
 @param typeName
 the fully qualified name of the type that could not be found.
 @param cause
 the optional cause of this exception, may be <code>null</code>.
 */
- (instancetype)initWithNSString:(NSString *)typeName
           withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Gets the fully qualified name of the type that could not be found.
 @return the name of the type that caused this exception.
 */
- (NSString *)typeName;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangTypeNotPresentException)

FOUNDATION_EXPORT void JavaLangTypeNotPresentException_initWithNSString_withJavaLangThrowable_(JavaLangTypeNotPresentException *self, NSString *typeName, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaLangTypeNotPresentException *new_JavaLangTypeNotPresentException_initWithNSString_withJavaLangThrowable_(NSString *typeName, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaLangTypeNotPresentException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaLangTypeNotPresentException_INCLUDE_ALL")
