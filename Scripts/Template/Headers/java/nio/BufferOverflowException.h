//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/BufferOverflowException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("JavaNioBufferOverflowException_INCLUDE_ALL")
#ifdef JavaNioBufferOverflowException_RESTRICT
#define JavaNioBufferOverflowException_INCLUDE_ALL 0
#else
#define JavaNioBufferOverflowException_INCLUDE_ALL 1
#endif
#undef JavaNioBufferOverflowException_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioBufferOverflowException_) && (JavaNioBufferOverflowException_INCLUDE_ALL || defined(JavaNioBufferOverflowException_INCLUDE))
#define JavaNioBufferOverflowException_

#define JavaLangRuntimeException_RESTRICT 1
#define JavaLangRuntimeException_INCLUDE 1
#include "../../java/lang/RuntimeException.h"

/*!
 @brief A <code>BufferOverflowException</code> is thrown when elements are written
 to a buffer but there is not enough remaining space in the buffer.
 */
@interface JavaNioBufferOverflowException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs a <code>BufferOverflowException</code>.
 */
- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioBufferOverflowException)

FOUNDATION_EXPORT void JavaNioBufferOverflowException_init(JavaNioBufferOverflowException *self);

FOUNDATION_EXPORT JavaNioBufferOverflowException *new_JavaNioBufferOverflowException_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaNioBufferOverflowException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaNioBufferOverflowException_INCLUDE_ALL")
