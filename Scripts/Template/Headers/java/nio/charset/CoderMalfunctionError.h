//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/charset/CoderMalfunctionError.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("JavaNioCharsetCoderMalfunctionError_INCLUDE_ALL")
#ifdef JavaNioCharsetCoderMalfunctionError_RESTRICT
#define JavaNioCharsetCoderMalfunctionError_INCLUDE_ALL 0
#else
#define JavaNioCharsetCoderMalfunctionError_INCLUDE_ALL 1
#endif
#undef JavaNioCharsetCoderMalfunctionError_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioCharsetCoderMalfunctionError_) && (JavaNioCharsetCoderMalfunctionError_INCLUDE_ALL || defined(JavaNioCharsetCoderMalfunctionError_INCLUDE))
#define JavaNioCharsetCoderMalfunctionError_

#define JavaLangError_RESTRICT 1
#define JavaLangError_INCLUDE 1
#include "../../../java/lang/Error.h"

@class JavaLangException;

/*!
 @brief A <code>CoderMalfunctionError</code> is thrown when the encoder/decoder is
 malfunctioning.
 */
@interface JavaNioCharsetCoderMalfunctionError : JavaLangError

#pragma mark Public

/*!
 @brief Constructs a new <code>CoderMalfunctionError</code>.
 @param ex
 the original exception thrown by the encoder/decoder.
 */
- (instancetype)initWithJavaLangException:(JavaLangException *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioCharsetCoderMalfunctionError)

FOUNDATION_EXPORT void JavaNioCharsetCoderMalfunctionError_initWithJavaLangException_(JavaNioCharsetCoderMalfunctionError *self, JavaLangException *ex);

FOUNDATION_EXPORT JavaNioCharsetCoderMalfunctionError *new_JavaNioCharsetCoderMalfunctionError_initWithJavaLangException_(JavaLangException *ex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaNioCharsetCoderMalfunctionError)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaNioCharsetCoderMalfunctionError_INCLUDE_ALL")
