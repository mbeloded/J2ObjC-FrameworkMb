//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/channels/OverlappingFileLockException.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("JavaNioChannelsOverlappingFileLockException_INCLUDE_ALL")
#ifdef JavaNioChannelsOverlappingFileLockException_RESTRICT
#define JavaNioChannelsOverlappingFileLockException_INCLUDE_ALL 0
#else
#define JavaNioChannelsOverlappingFileLockException_INCLUDE_ALL 1
#endif
#undef JavaNioChannelsOverlappingFileLockException_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioChannelsOverlappingFileLockException_) && (JavaNioChannelsOverlappingFileLockException_INCLUDE_ALL || defined(JavaNioChannelsOverlappingFileLockException_INCLUDE))
#define JavaNioChannelsOverlappingFileLockException_

#define JavaLangIllegalStateException_RESTRICT 1
#define JavaLangIllegalStateException_INCLUDE 1
#include "../../../java/lang/IllegalStateException.h"

/*!
 @brief An <code>OverlappingFileLockException</code> is thrown when attempting to acquire
 a lock that overlaps an existing or pending lock held by this process.
 */
@interface JavaNioChannelsOverlappingFileLockException : JavaLangIllegalStateException

#pragma mark Public

/*!
 @brief Constructs a <code>OverlappingFileLockException</code>.
 */
- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsOverlappingFileLockException)

FOUNDATION_EXPORT void JavaNioChannelsOverlappingFileLockException_init(JavaNioChannelsOverlappingFileLockException *self);

FOUNDATION_EXPORT JavaNioChannelsOverlappingFileLockException *new_JavaNioChannelsOverlappingFileLockException_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsOverlappingFileLockException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaNioChannelsOverlappingFileLockException_INCLUDE_ALL")
