//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/channels/ConnectionPendingException.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("JavaNioChannelsConnectionPendingException_INCLUDE_ALL")
#ifdef JavaNioChannelsConnectionPendingException_RESTRICT
#define JavaNioChannelsConnectionPendingException_INCLUDE_ALL 0
#else
#define JavaNioChannelsConnectionPendingException_INCLUDE_ALL 1
#endif
#undef JavaNioChannelsConnectionPendingException_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioChannelsConnectionPendingException_) && (JavaNioChannelsConnectionPendingException_INCLUDE_ALL || defined(JavaNioChannelsConnectionPendingException_INCLUDE))
#define JavaNioChannelsConnectionPendingException_

#define JavaLangIllegalStateException_RESTRICT 1
#define JavaLangIllegalStateException_INCLUDE 1
#include "../../../java/lang/IllegalStateException.h"

/*!
 @brief A <code>ConnectionPendingException</code> is thrown when an attempt is made to
 connect a <code>SocketChannel</code> that has a non-blocking connection already
 underway.
 */
@interface JavaNioChannelsConnectionPendingException : JavaLangIllegalStateException

#pragma mark Public

/*!
 @brief Constructs a <code>ConnectionPendingException</code>.
 */
- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsConnectionPendingException)

FOUNDATION_EXPORT void JavaNioChannelsConnectionPendingException_init(JavaNioChannelsConnectionPendingException *self);

FOUNDATION_EXPORT JavaNioChannelsConnectionPendingException *new_JavaNioChannelsConnectionPendingException_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsConnectionPendingException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaNioChannelsConnectionPendingException_INCLUDE_ALL")
