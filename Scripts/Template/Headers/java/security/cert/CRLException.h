//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/cert/CRLException.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("JavaSecurityCertCRLException_INCLUDE_ALL")
#ifdef JavaSecurityCertCRLException_RESTRICT
#define JavaSecurityCertCRLException_INCLUDE_ALL 0
#else
#define JavaSecurityCertCRLException_INCLUDE_ALL 1
#endif
#undef JavaSecurityCertCRLException_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityCertCRLException_) && (JavaSecurityCertCRLException_INCLUDE_ALL || defined(JavaSecurityCertCRLException_INCLUDE))
#define JavaSecurityCertCRLException_

#define JavaSecurityGeneralSecurityException_RESTRICT 1
#define JavaSecurityGeneralSecurityException_INCLUDE 1
#include "../../../java/security/GeneralSecurityException.h"

@class JavaLangThrowable;

/*!
 @brief The exception that is thrown if errors occur during handling of <code>CRL</code>s.
 */
@interface JavaSecurityCertCRLException : JavaSecurityGeneralSecurityException

#pragma mark Public

/*!
 @brief Creates a new <code>CRLException</code>.
 */
- (instancetype)init;

/*!
 @brief Creates a new <code>CRLException</code> with the specified message.
 @param msg
 the detail message for this exception.
 */
- (instancetype)initWithNSString:(NSString *)msg;

/*!
 @brief Creates a new <code>CRLException</code> with the specified message and cause.
 @param message
 the detail message for this exception.
 @param cause
 the cause for this exception.
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Creates a new <code>CRLException</code> with the specified cause.
 @param cause
 the cause for this exception.
 */
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCRLException)

FOUNDATION_EXPORT void JavaSecurityCertCRLException_initWithNSString_(JavaSecurityCertCRLException *self, NSString *msg);

FOUNDATION_EXPORT JavaSecurityCertCRLException *new_JavaSecurityCertCRLException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaSecurityCertCRLException_init(JavaSecurityCertCRLException *self);

FOUNDATION_EXPORT JavaSecurityCertCRLException *new_JavaSecurityCertCRLException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaSecurityCertCRLException_initWithNSString_withJavaLangThrowable_(JavaSecurityCertCRLException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityCertCRLException *new_JavaSecurityCertCRLException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaSecurityCertCRLException_initWithJavaLangThrowable_(JavaSecurityCertCRLException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityCertCRLException *new_JavaSecurityCertCRLException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCRLException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaSecurityCertCRLException_INCLUDE_ALL")
