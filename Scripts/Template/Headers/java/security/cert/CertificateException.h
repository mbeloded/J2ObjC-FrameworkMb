//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/cert/CertificateException.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("JavaSecurityCertCertificateException_INCLUDE_ALL")
#ifdef JavaSecurityCertCertificateException_RESTRICT
#define JavaSecurityCertCertificateException_INCLUDE_ALL 0
#else
#define JavaSecurityCertCertificateException_INCLUDE_ALL 1
#endif
#undef JavaSecurityCertCertificateException_RESTRICT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityCertCertificateException_) && (JavaSecurityCertCertificateException_INCLUDE_ALL || defined(JavaSecurityCertCertificateException_INCLUDE))
#define JavaSecurityCertCertificateException_

#define JavaSecurityGeneralSecurityException_RESTRICT 1
#define JavaSecurityGeneralSecurityException_INCLUDE 1
#include "../../../java/security/GeneralSecurityException.h"

@class JavaLangThrowable;

/*!
 @brief The base class for all <code>Certificate</code> related exceptions.
 */
@interface JavaSecurityCertCertificateException : JavaSecurityGeneralSecurityException

#pragma mark Public

/*!
 @brief Creates a new <code>CertificateException</code>.
 */
- (instancetype)init;

/*!
 @brief Creates a new <code>CertificateException</code> with the specified message.
 @param msg
 the detail message for the exception.
 */
- (instancetype)initWithNSString:(NSString *)msg;

/*!
 @brief Creates a new <code>CertificateException</code> with the specified message and
 cause.
 @param message
 the detail message for the exception.
 @param cause
 the cause.
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Creates a new <code>CertificateException</code> with the specified cause.
 @param cause
 the cause
 */
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertificateException)

FOUNDATION_EXPORT void JavaSecurityCertCertificateException_initWithNSString_(JavaSecurityCertCertificateException *self, NSString *msg);

FOUNDATION_EXPORT JavaSecurityCertCertificateException *new_JavaSecurityCertCertificateException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaSecurityCertCertificateException_init(JavaSecurityCertCertificateException *self);

FOUNDATION_EXPORT JavaSecurityCertCertificateException *new_JavaSecurityCertCertificateException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaSecurityCertCertificateException_initWithNSString_withJavaLangThrowable_(JavaSecurityCertCertificateException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityCertCertificateException *new_JavaSecurityCertCertificateException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaSecurityCertCertificateException_initWithJavaLangThrowable_(JavaSecurityCertCertificateException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityCertCertificateException *new_JavaSecurityCertCertificateException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertificateException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("JavaSecurityCertCertificateException_INCLUDE_ALL")
